{"version":3,"file":"avalanche-js-transaction.cjs.development.js","sources":["../src/types.ts","../src/utils.ts","../src/transactionBase.ts","../src/transaction.ts","../src/shardingTransaction.ts","../src/factory.ts","../src/abstractTransaction.ts"],"sourcesContent":["/**\n # avalanche-js-transaction\n\nThis package provides a collection of apis to create, sign/send transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install avalanche-js-transaction\n```\n\n## Usage\n\nCreate a Avalanche instance connecting to testnet\n\n```javascript\n* const { Avalanche } = require('avalanche-js-core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('avalanche-js-utils');\n\n* const hmy = new Avalanche(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Avalanche,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\n\nCreating a new transaction using parameters\n```javascript\n* const txn = hmy.transactions.newTx({\n*   to: 'avax166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n*   value: new Unit(1).asAVAX().toWei(),\n*   // gas limit, you can use string\n*   gasLimit: '21000',\n*   // send token from shardID\n*   shardID: 0,\n*   // send token to toShardID\n*   toShardID: 0,\n*   // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n*   gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),\n* });\n```\n\nRecovering transaction from raw transaction hash\n```javascript\n* const raw = '0xf86d21843b9aca00825208808094d6ba69da5b45ec98b53e3258d7de756a567b6763880de0b6b3a76400008028a0da8887719f377401963407fc1d82d2ab52404600cf7bea37c27bd2dfd7c86aaaa03c405b0843394442b303256a804bde835821a8a77bd88a2ced9ffdc8b0a409e9';\n* const tx = hmy.transactions.recover(raw);\n```\n\nGetting the RLP encoding of a transaction (rawTransaction), along with raw transaction field values that were encoded\n```javascript\n* const [encoded, raw] = txn.getRLPUnsigned()\n```\n\nSign the transaction using a wallet and send the transaction, wait for confirmation and print receipt\n```javascript\n* // key corresponds to avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signTransaction(txn).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log('tx hash: ' + hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nAsynchronous transaction sign, send, and confirm\n```javascript\n* async function transfer() {\n*   hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n*   const signedTxn = await hmy.wallet.signTransaction(txn);\n*   signedTxn\n*     .observed()\n*     .on('transactionHash', (txnHash) => {\n*       console.log('');\n*       console.log('--- hash ---');\n*       console.log('');\n*       console.log(txnHash);\n*       console.log('');\n*     })\n*     .on('receipt', (receipt) => {\n*       console.log('');\n*       console.log('--- receipt ---');\n*       console.log('');\n*       console.log(receipt);\n*       console.log('');\n*     })\n*     .on('cxReceipt', (receipt) => {\n*       console.log('');\n*       console.log('--- cxReceipt ---');\n*       console.log('');\n*       console.log(receipt);\n*       console.log('');\n*     })\n*     .on('error', (error) => {\n*       console.log('');\n*       console.log('--- error ---');\n*       console.log('');\n*       console.log(error);\n*       console.log('');\n*     });\n\n*   const [sentTxn, txnHash] = await signedTxn.sendTransaction();\n\n*   const confiremdTxn = await sentTxn.confirm(txnHash);\n\n*   // if the transactino is cross-shard transaction\n*   if (!confiremdTxn.isCrossShard()) {\n*     if (confiremdTxn.isConfirmed()) {\n*       console.log('--- Result ---');\n*       console.log('');\n*       console.log('Normal transaction');\n*       console.log(`${txnHash} is confirmed`);\n*       console.log('');\n*       console.log('please see detail in explorer:');\n*       console.log('');\n*       console.log('https://explorer.testnet.avalanche.avax/#/tx/' + txnHash);\n*       console.log('');\n*       process.exit();\n*     }\n*   }\n*   if (confiremdTxn.isConfirmed() && confiremdTxn.isCxConfirmed()) {\n*     console.log('--- Result ---');\n*     console.log('');\n*     console.log('Cross-Shard transaction');\n*     console.log(`${txnHash} is confirmed`);\n*     console.log('');\n*     console.log('please see detail in explorer:');\n*     console.log('');\n*     console.log('https://explorer.testnet.avalanche.avax/#/tx/' + txnHash);\n*     console.log('');\n*     process.exit();\n*   }\n* }\n* transfer();\n```\n *\n * @packageDocumentation\n * @module avalanche-transaction\n */\n\nimport { BN, Signature } from 'avalanche-js-crypto';\n\nexport interface TxParams {\n  id: string;\n  from: string;\n  to: string;\n  nonce: number | string;\n  gasLimit: number | string | BN;\n  gasPrice: number | string | BN;\n  shardID: number | string;\n  toShardID: number | string;\n  data: string;\n  value: number | string | BN;\n  chainId: number;\n  rawTransaction: string;\n  unsignedRawTransaction: string;\n  signature: Signature;\n  receipt?: TransasctionReceipt;\n}\n\nexport enum TxStatus {\n  NONE = 'NONE',\n  INTIALIZED = 'INITIALIZED',\n  SIGNED = 'SIGNED',\n  PENDING = 'PENDING',\n  CONFIRMED = 'CONFIRMED',\n  REJECTED = 'REJECTED',\n}\n\nexport interface TransasctionReceipt {\n  transactionHash: string;\n  transactionIndex: string;\n  blockHash: string;\n  blockNumber: string; // 11\n  from: string;\n  to: string;\n  gasUsed: string;\n  cumulativeGasUsed: string; // 13244\n  contractAddress?: string | null; // or null, if none was created\n  logs: any[];\n  logsBloom: string; // 256 byte bloom filter\n  v: string;\n  r: string;\n  s: string;\n  responseType?: string;\n  byzantium?: boolean;\n  status?: string; // post Byzantium will return `0x0` or `0x1`\n  root?: string; // pre Byzantium will return `root`\n}\n","/**\n * @packageDocumentation\n * @module avalanche-transaction\n * @hidden\n */\n\nimport { hexToNumber, isHex, isAddress, strip0x, ChainType } from 'avalanche-js-utils';\nimport {\n  decode,\n  encode,\n  keccak256,\n  hexlify,\n  BN,\n  hexZeroPad,\n  recoverAddress,\n  Signature,\n  getAddress,\n  sign,\n} from 'avalanche-js-crypto';\nimport { HttpProvider, Messenger } from 'avalanche-js-network';\nimport { TxParams } from './types';\nimport { Transaction } from './transaction';\n\nexport const transactionFields = [\n  { name: 'nonce', length: 32, fix: false },\n  { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n  { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n  { name: 'shardID', length: 16, fix: false },\n  // recover it after main repo fix\n  { name: 'toShardID', length: 16, fix: false },\n  { name: 'to', length: 20, fix: true },\n  { name: 'value', length: 32, fix: false, transform: 'hex' },\n  { name: 'data', fix: false },\n];\n\nexport const transactionFieldsETH = [\n  { name: 'nonce', length: 32, fix: false },\n  { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n  { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n  { name: 'to', length: 20, fix: true },\n  { name: 'value', length: 32, fix: false, transform: 'hex' },\n  { name: 'data', fix: false },\n];\n\nexport const handleNumber = (value: string) => {\n  if (isHex(value) && value === '0x') {\n    return hexToNumber('0x00');\n  } else if (isHex(value) && value !== '0x') {\n    return hexToNumber(value);\n  } else {\n    return value;\n  }\n};\n\nexport const handleAddress = (value: string): string => {\n  if (value === '0x') {\n    return '0x';\n  } else if (isAddress(value)) {\n    return value;\n  } else {\n    return '0x';\n  }\n};\n\nexport const recover = (rawTransaction: string) => {\n  const transaction = decode(rawTransaction);\n  if (transaction.length !== 11 && transaction.length !== 8) {\n    throw new Error('invalid rawTransaction');\n  }\n\n  const tx: TxParams = {\n    id: '0x',\n    from: '0x',\n    rawTransaction: '0x',\n    unsignedRawTransaction: '0x',\n    nonce: new BN(strip0x(handleNumber(transaction[0]))).toNumber(),\n    gasPrice: new BN(strip0x(handleNumber(transaction[1]))),\n    gasLimit: new BN(strip0x(handleNumber(transaction[2]))),\n    shardID: new BN(strip0x(handleNumber(transaction[3]))).toNumber(),\n    toShardID: new BN(strip0x(handleNumber(transaction[4]))).toNumber(),\n    to:\n      handleAddress(transaction[5]) !== '0x'\n        ? getAddress(handleAddress(transaction[5])).checksum\n        : '0x',\n    value: new BN(strip0x(handleNumber(transaction[6]))),\n    data: transaction[7],\n    chainId: 0,\n    signature: {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    },\n  };\n\n  // Legacy unsigned transaction\n  if (transaction.length === 8) {\n    tx.unsignedRawTransaction = rawTransaction;\n    return tx;\n  }\n\n  try {\n    tx.signature.v = new BN(strip0x(handleNumber(transaction[8]))).toNumber();\n  } catch (error) {\n    throw error;\n  }\n\n  tx.signature.r = hexZeroPad(transaction[9], 32);\n  tx.signature.s = hexZeroPad(transaction[10], 32);\n\n  if (\n    new BN(strip0x(handleNumber(tx.signature.r))).isZero() &&\n    new BN(strip0x(handleNumber(tx.signature.s))).isZero()\n  ) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.signature.v;\n    tx.signature.v = 0;\n  } else {\n    // Signed Tranasaction\n\n    tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.signature.v - 27;\n\n    const raw = transaction.slice(0, 8);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(encode(raw));\n    try {\n      const recoveredFrom = recoverAddress(digest, {\n        r: hexlify(tx.signature.r),\n        s: hexlify(tx.signature.s),\n        recoveryParam,\n      });\n      tx.from = recoveredFrom === '0x' ? '0x' : getAddress(recoveredFrom).checksum;\n    } catch (error) {\n      throw error;\n    }\n    tx.rawTransaction = rawTransaction;\n    tx.id = keccak256(rawTransaction);\n  }\n\n  return tx;\n};\n\nexport const recoverETH = (rawTransaction: string) => {\n  const transaction = decode(rawTransaction);\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    throw new Error('invalid rawTransaction');\n  }\n\n  const tx: TxParams = {\n    id: '0x',\n    from: '0x',\n    rawTransaction: '0x',\n    unsignedRawTransaction: '0x',\n    nonce: new BN(strip0x(handleNumber(transaction[0]))).toNumber(),\n    gasPrice: new BN(strip0x(handleNumber(transaction[1]))),\n    gasLimit: new BN(strip0x(handleNumber(transaction[2]))),\n    shardID: 0,\n    toShardID: 0,\n\n    to:\n      handleAddress(transaction[3]) !== '0x'\n        ? getAddress(handleAddress(transaction[3])).checksum\n        : '0x',\n    value: new BN(strip0x(handleNumber(transaction[4]))),\n    data: transaction[5],\n    chainId: 0,\n    signature: {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    },\n  };\n\n  // Legacy unsigned transaction\n  if (transaction.length === 6) {\n    tx.unsignedRawTransaction = rawTransaction;\n    return tx;\n  }\n\n  try {\n    tx.signature.v = new BN(strip0x(handleNumber(transaction[6]))).toNumber();\n  } catch (error) {\n    throw error;\n  }\n\n  tx.signature.r = hexZeroPad(transaction[7], 32);\n  tx.signature.s = hexZeroPad(transaction[8], 32);\n\n  if (\n    new BN(strip0x(handleNumber(tx.signature.r))).isZero() &&\n    new BN(strip0x(handleNumber(tx.signature.s))).isZero()\n  ) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.signature.v;\n    tx.signature.v = 0;\n  } else {\n    // Signed Tranasaction\n\n    tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.signature.v - 27;\n\n    const raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(encode(raw));\n    try {\n      const recoveredFrom = recoverAddress(digest, {\n        r: hexlify(tx.signature.r),\n        s: hexlify(tx.signature.s),\n        recoveryParam,\n      });\n      tx.from = recoveredFrom === '0x' ? '0x' : getAddress(recoveredFrom).checksum;\n    } catch (error) {\n      throw error;\n    }\n    tx.rawTransaction = rawTransaction;\n    tx.id = keccak256(rawTransaction);\n  }\n\n  return tx;\n};\n\nexport const sleep = async (ms: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => resolve(), ms);\n  });\n\nexport enum TransactionEvents {\n  transactionHash = 'transactionHash',\n  error = 'error',\n  confirmation = 'confirmation',\n  receipt = 'receipt',\n  track = 'track',\n  cxConfirmation = 'cxConfirmation',\n  cxReceipt = 'cxReceipt',\n  cxTrack = 'cxTrack',\n}\n\nexport const defaultMessenger = new Messenger(\n  new HttpProvider('http://localhost:9500'),\n  ChainType.Avalanche,\n);\n\nexport const RLPSign = (transaction: Transaction, prv: string): [Signature, string] => {\n  const [unsignedRawTransaction, raw] = transaction.getRLPUnsigned();\n  const regroup: TxParams = {\n    ...transaction.txParams,\n    unsignedRawTransaction,\n  };\n  transaction.setParams(regroup);\n  const signature = sign(keccak256(unsignedRawTransaction), prv);\n  const signed = transaction.getRLPSigned(raw, signature);\n  return [signature, signed];\n};\n","/**\n * @packageDocumentation\n * @module avalanche-transaction\n * @hidden\n */\n\nimport { BN, getAddress, AvalancheAddress } from 'avalanche-js-crypto';\nimport { hexToNumber } from 'avalanche-js-utils';\nimport { Messenger, RPCMethod, Emitter, HttpProvider, NewHeaders } from 'avalanche-js-network';\nimport { TxStatus, TransasctionReceipt } from './types';\nimport { sleep, TransactionEvents } from './utils';\nimport { AbstractTransaction } from './abstractTransaction';\n\nexport class TransactionBase implements AbstractTransaction {\n  static normalizeAddress(address: string) {\n    if (address === '0x') {\n      return '0x';\n    } else if (\n      AvalancheAddress.isValidChecksum(address) ||\n      AvalancheAddress.isValidBech32(address) ||\n      AvalancheAddress.isValidBech32TestNet(address)\n    ) {\n      return getAddress(address).checksum;\n    } else {\n      throw new Error(`Address format is not supported`);\n    }\n  }\n  emitter: Emitter;\n  messenger: Messenger;\n  txStatus: TxStatus;\n  blockNumbers: string[] = [];\n  confirmations: number = 0;\n  confirmationCheck: number = 0;\n  cxStatus: TxStatus = TxStatus.INTIALIZED;\n  cxBlockNumbers: string[] = [];\n  cxConfirmations: number = 0;\n  cxConfirmationCheck: number = 0;\n  receipt?: TransasctionReceipt;\n\n  id: string;\n  shardID: number | string;\n\n  constructor(messenger: Messenger, txStatus: TxStatus) {\n    this.messenger = messenger;\n    this.txStatus = txStatus;\n    this.emitter = new Emitter();\n    this.id = '0x';\n    this.shardID = this.messenger.currentShard;\n  }\n\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n\n  setTxStatus(txStatus: TxStatus): void {\n    this.txStatus = txStatus;\n  }\n\n  getTxStatus(): TxStatus {\n    return this.txStatus;\n  }\n  setCxStatus(cxStatus: TxStatus): void {\n    this.cxStatus = cxStatus;\n  }\n\n  getCxStatus(): TxStatus {\n    return this.cxStatus;\n  }\n\n  // get status\n  isInitialized(): boolean {\n    return this.getTxStatus() === TxStatus.INTIALIZED;\n  }\n  isSigned(): boolean {\n    return this.getTxStatus() === TxStatus.SIGNED;\n  }\n  isPending(): boolean {\n    return this.getTxStatus() === TxStatus.PENDING;\n  }\n  isRejected(): boolean {\n    return this.getTxStatus() === TxStatus.REJECTED;\n  }\n  isConfirmed(): boolean {\n    return this.getTxStatus() === TxStatus.CONFIRMED;\n  }\n  isCxPending(): boolean {\n    return this.getCxStatus() === TxStatus.PENDING;\n  }\n  isCxRejected(): boolean {\n    return this.getCxStatus() === TxStatus.REJECTED;\n  }\n  isCxConfirmed(): boolean {\n    return this.getCxStatus() === TxStatus.CONFIRMED;\n  }\n  observed() {\n    return this.emitter;\n  }\n\n  async trackTx(txHash: string, shardID: number | string) {\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n    // TODO: regex validation for txHash so we don't get garbage\n    const res = await this.messenger.send(\n      RPCMethod.GetTransactionReceipt,\n      txHash,\n      this.messenger.chainType,\n      typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID,\n    );\n    if (res.isResult() && res.result !== null) {\n      this.receipt = res.result;\n      this.emitReceipt(this.receipt);\n      this.id = res.result.transactionHash;\n      this.confirmations += 1;\n\n      if (this.receipt) {\n        if (this.receipt.status && this.receipt.status === '0x1') {\n          this.receipt.byzantium = true;\n          this.txStatus = TxStatus.CONFIRMED;\n        } else if (this.receipt.status && this.receipt.status === '0x0') {\n          this.receipt.byzantium = true;\n          this.txStatus = TxStatus.REJECTED;\n        } else if (this.receipt.status === undefined && this.receipt.root) {\n          this.receipt.byzantium = false;\n          this.txStatus = TxStatus.CONFIRMED;\n        }\n        return true;\n      } else {\n        this.txStatus = TxStatus.PENDING;\n        const currentBlock = await this.getBlockNumber(shardID);\n\n        this.blockNumbers.push('0x' + currentBlock.toString('hex'));\n\n        this.confirmationCheck += 1;\n        return false;\n      }\n    } else {\n      this.txStatus = TxStatus.PENDING;\n      const currentBlock = await this.getBlockNumber(shardID);\n      this.blockNumbers.push('0x' + currentBlock.toString('hex'));\n      this.confirmationCheck += 1;\n      return false;\n    }\n  }\n\n  async txConfirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    shardID: number | string,\n  ) {\n    if (this.messenger.provider instanceof HttpProvider) {\n      this.txStatus = TxStatus.PENDING;\n      const oldBlock = await this.getBlockNumber(shardID);\n      let checkBlock = oldBlock;\n\n      for (let attempt = 0; attempt < maxAttempts; attempt += 1) {\n        try {\n          const newBlock = await this.getBlockNumber(shardID);\n          // TODO: this is super ugly, must be a better way doing this\n          const nextBlock = checkBlock.add(new BN(attempt === 0 ? attempt : 1));\n\n          if (newBlock.gte(nextBlock)) {\n            checkBlock = newBlock;\n            this.emitTrack({\n              txHash,\n              attempt,\n              currentBlock: checkBlock.toString(),\n              shardID,\n            });\n\n            if (await this.trackTx(txHash, shardID)) {\n              this.emitConfirm(this.txStatus);\n              return this;\n            }\n          } else {\n            attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n          }\n        } catch (err) {\n          this.txStatus = TxStatus.REJECTED;\n          this.emitConfirm(this.txStatus);\n          throw err;\n        }\n\n        if (attempt + 1 < maxAttempts) {\n          // await sleep(interval * attempt);\n          await sleep(interval);\n        }\n      }\n      this.txStatus = TxStatus.REJECTED;\n      this.emitConfirm(this.txStatus);\n      throw new Error(`The transaction is still not confirmed after ${maxAttempts} attempts.`);\n    } else {\n      try {\n        if (await this.trackTx(txHash, shardID)) {\n          this.emitConfirm(this.txStatus);\n          return this;\n        } else {\n          const result = await this.socketConfirm(txHash, maxAttempts, shardID);\n          return result;\n        }\n      } catch (error) {\n        this.txStatus = TxStatus.REJECTED;\n        this.emitConfirm(this.txStatus);\n        throw new Error(\n          `The transaction is still not confirmed after ${maxAttempts * interval} mil seconds.`,\n        );\n      }\n    }\n  }\n\n  socketConfirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    shardID: number | string,\n  ): Promise<TransactionBase> {\n    return new Promise((resolve, reject) => {\n      const newHeads = Promise.resolve(\n        new NewHeaders(\n          this.messenger,\n          typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID,\n        ),\n      );\n      newHeads.then((p) => {\n        p.onData(async (data: any) => {\n          const blockNumber =\n            this.messenger.chainPrefix === 'hmy'\n              ? data.params.result.Header.number\n              : data.params.result.number;\n          this.emitTrack({\n            txHash,\n            attempt: this.confirmationCheck,\n            currentBlock: hexToNumber(blockNumber),\n            shardID,\n          });\n          if (!this.blockNumbers.includes(blockNumber)) {\n            if (await this.trackTx(txHash, shardID)) {\n              this.emitConfirm(this.txStatus);\n              await p.unsubscribe();\n              resolve(this);\n            } else {\n              if (this.confirmationCheck === maxAttempts) {\n                this.txStatus = TxStatus.REJECTED;\n                this.emitConfirm(this.txStatus);\n                await p.unsubscribe();\n                resolve(this);\n              }\n            }\n          }\n        }).onError(async (error: any) => {\n          this.txStatus = TxStatus.REJECTED;\n          this.emitConfirm(this.txStatus);\n          this.emitError(error);\n          await p.unsubscribe();\n          reject(error);\n        });\n      });\n    });\n  }\n\n  emitTransactionHash(transactionHash: string) {\n    this.emitter.emit(TransactionEvents.transactionHash, transactionHash);\n  }\n  emitReceipt(receipt: any) {\n    this.emitter.emit(TransactionEvents.receipt, receipt);\n  }\n  emitError(error: any) {\n    this.emitter.emit(TransactionEvents.error, error);\n  }\n  emitConfirm(data: any) {\n    this.emitter.emit(TransactionEvents.confirmation, data);\n  }\n  emitTrack(data: any) {\n    this.emitter.emit(TransactionEvents.track, data);\n  }\n  emitCxReceipt(receipt: any) {\n    this.emitter.emit(TransactionEvents.cxReceipt, receipt);\n  }\n  emitCxConfirm(data: any) {\n    this.emitter.emit(TransactionEvents.cxConfirmation, data);\n  }\n  emitCxTrack(data: any) {\n    this.emitter.emit(TransactionEvents.cxTrack, data);\n  }\n\n  async getBlockNumber(shardID: number | string): Promise<BN> {\n    try {\n      const currentBlock = await this.messenger.send(\n        RPCMethod.BlockNumber,\n        [],\n        this.messenger.chainPrefix,\n        typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID,\n      );\n      if (currentBlock.isError()) {\n        throw currentBlock.message;\n      }\n      return new BN(currentBlock.result.replace('0x', ''), 'hex');\n    } catch (error) {\n      throw error;\n    }\n  }\n  async getBlockByNumber(blockNumber: string) {\n    try {\n      const block = await this.messenger.send(\n        RPCMethod.GetBlockByNumber,\n        [blockNumber, true],\n        this.messenger.chainPrefix,\n        typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID,\n      );\n      if (block.isError()) {\n        throw block.message;\n      }\n      return block.result;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async cxConfirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    toShardID: number | string,\n  ) {\n    if (this.messenger.provider instanceof HttpProvider) {\n      const oldBlock = await this.getBlockNumber(toShardID);\n      let checkBlock = oldBlock;\n\n      for (let attempt = 0; attempt < maxAttempts; attempt += 1) {\n        try {\n          const newBlock = await this.getBlockNumber(toShardID);\n          // TODO: this is super ugly, must be a better way doing this\n          const nextBlock = checkBlock.add(new BN(attempt === 0 ? attempt : 1));\n\n          if (newBlock.gte(nextBlock)) {\n            checkBlock = newBlock;\n            this.emitCxTrack({\n              txHash,\n              attempt,\n              currentBlock: checkBlock.toString(),\n              toShardID,\n            });\n\n            if (await this.trackCx(txHash, toShardID)) {\n              this.emitCxConfirm(this.cxStatus);\n              return this;\n            }\n          } else {\n            attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n          }\n        } catch (err) {\n          this.cxStatus = TxStatus.REJECTED;\n          this.emitCxConfirm(this.cxStatus);\n          throw err;\n        }\n        if (attempt + 1 < maxAttempts) {\n          await sleep(interval);\n        }\n      }\n      this.cxStatus = TxStatus.REJECTED;\n      this.emitCxConfirm(this.cxStatus);\n      throw new Error(`The transaction is still not confirmed after ${maxAttempts} attempts.`);\n    } else {\n      try {\n        if (await this.trackCx(txHash, toShardID)) {\n          this.emitCxConfirm(this.cxStatus);\n          return this;\n        } else {\n          const result = await this.socketCxConfirm(txHash, maxAttempts, toShardID);\n          return result;\n        }\n      } catch (error) {\n        this.cxStatus = TxStatus.REJECTED;\n        this.emitCxConfirm(this.cxStatus);\n        throw new Error(\n          `The transaction is still not confirmed after ${maxAttempts * interval} mil seconds.`,\n        );\n      }\n    }\n  }\n\n  async trackCx(txHash: string, toShardID: number | string) {\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n    // TODO: regex validation for txHash so we don't get garbage\n    const res = await this.messenger.send(\n      RPCMethod.GetCXReceiptByHash,\n      txHash,\n      this.messenger.chainPrefix,\n      typeof toShardID === 'string' ? Number.parseInt(toShardID, 10) : toShardID,\n    );\n    if (res.isResult() && res.result !== null) {\n      this.emitCxReceipt(res.result);\n      this.cxStatus = TxStatus.CONFIRMED;\n      return true;\n    } else {\n      const currentBlock = await this.getBlockNumber(toShardID);\n      this.cxBlockNumbers.push('0x' + currentBlock.toString('hex'));\n      this.cxConfirmationCheck += 1;\n      this.cxStatus = TxStatus.PENDING;\n      return false;\n    }\n  }\n\n  socketCxConfirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    toShardID: number | string,\n  ): Promise<TransactionBase> {\n    return new Promise((resolve, reject) => {\n      const newHeads = Promise.resolve(\n        new NewHeaders(\n          this.messenger,\n          typeof toShardID === 'string' ? Number.parseInt(toShardID, 10) : toShardID,\n        ),\n      );\n      newHeads.then((p) => {\n        p.onData(async (data: any) => {\n          const blockNumber =\n            this.messenger.chainPrefix === 'hmy'\n              ? data.params.result.Header.number\n              : data.params.result.number;\n          this.emitCxTrack({\n            txHash,\n            attempt: this.cxConfirmationCheck,\n            currentBlock: hexToNumber(blockNumber),\n            toShardID,\n          });\n          if (!this.blockNumbers.includes(blockNumber)) {\n            if (await this.trackCx(txHash, toShardID)) {\n              this.emitCxConfirm(this.cxStatus);\n              await p.unsubscribe();\n              resolve(this);\n            } else {\n              if (this.cxConfirmationCheck === maxAttempts) {\n                this.cxStatus = TxStatus.REJECTED;\n                this.emitCxConfirm(this.cxStatus);\n                await p.unsubscribe();\n                resolve(this);\n              }\n            }\n          }\n        }).onError(async (error: any) => {\n          this.cxStatus = TxStatus.REJECTED;\n          this.emitCxConfirm(this.cxStatus);\n          this.emitError(error);\n          await p.unsubscribe();\n          reject(error);\n        });\n      });\n    });\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-transaction\n */\n\nimport {\n  BN,\n  encode,\n  arrayify,\n  hexlify,\n  stripZeros,\n  Signature,\n  splitSignature,\n} from 'avalanche-js-crypto';\nimport { add0xToString, numberToHex, ChainType, Unit } from 'avalanche-js-utils';\nimport { Messenger, RPCMethod } from 'avalanche-js-network';\nimport { TxParams, TxStatus } from './types';\nimport {\n  recover,\n  transactionFields,\n  defaultMessenger,\n  transactionFieldsETH,\n  recoverETH,\n} from './utils';\n\nimport { TransactionBase } from './transactionBase';\n\nclass Transaction extends TransactionBase {\n  /** @hidden */\n  private from: string;\n  /** @hidden */\n  private nonce: number | string;\n  /** @hidden */\n  private to: string;\n  // private shardID: number | string;\n  /** @hidden */\n  private toShardID: number | string;\n  /** @hidden */\n  private gasLimit: BN;\n  /** @hidden */\n  private gasPrice: BN;\n  /** @hidden */\n  private data: string;\n  /** @hidden */\n  private value: BN;\n  /** @hidden */\n  private chainId: number;\n  /** @hidden */\n  private rawTransaction: string;\n  /** @hidden */\n  private unsignedRawTransaction: string;\n  /** @hidden */\n  private signature: Signature;\n\n  /**\n   * \n   * @Params\n   * ```javascript\n   * id:               string;\n    from:             string;\n    to:               string;\n    nonce:            number | string;\n    gasLimit:         number | string | BN;\n    gasPrice:         number | string | BN;\n    shardID:          number | string;\n    toShardID:        number | string;\n    data:             string;\n    value:            number | string | BN;\n    chainId:          number;\n    rawTransaction:   string;\n    unsignedRawTransaction: string;\n    signature:        Signature;\n    receipt?:         TransasctionReceipt;\n   * ```\n   */\n  constructor(\n    params?: TxParams | any,\n    messenger: Messenger = defaultMessenger,\n    txStatus = TxStatus.INTIALIZED,\n  ) {\n    super(messenger, txStatus);\n    // intialize transaction\n    this.id = params && params.id ? params.id : '0x';\n    this.from = params && params.from ? params.from : '0x';\n    this.nonce = params && params.nonce ? params.nonce : 0;\n    this.gasPrice =\n      params && params.gasPrice\n        ? new Unit(params.gasPrice).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.gasLimit =\n      params && params.gasLimit\n        ? new Unit(params.gasLimit).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.shardID =\n      params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n    this.toShardID =\n      params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n\n    this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n    this.value =\n      params && params.value ? new Unit(params.value).asWei().toWei() : new Unit(0).asWei().toWei();\n    this.data = params && params.data ? params.data : '0x';\n    // chainid should change with different network settings\n    this.chainId = params && params.chainId ? params.chainId : this.messenger.chainId;\n    this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n    this.unsignedRawTransaction =\n      params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n    this.signature =\n      params && params.signature\n        ? params.signature\n        : {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n          };\n\n    this.receipt = params && params.receipt ? params.receipt : undefined;\n    this.cxStatus = this.isCrossShard() ? TxStatus.INTIALIZED : TxStatus.NONE;\n  }\n\n  /**\n   *\n   * @example\n   * ```javascript\n   * const unsigned = txn.getRLPUnsigned(txn);\n   * console.log(unsigned);\n   * ```\n   */\n  getRLPUnsigned(): [string, any[]] {\n    const raw: Array<string | Uint8Array> = [];\n\n    // temp setting to be compatible with eth\n    const fields =\n      this.messenger.chainType === ChainType.Avalanche ? transactionFields : transactionFieldsETH;\n\n    fields.forEach((field: any) => {\n      let value = (<any>this.txParams)[field.name] || [];\n      value = arrayify(\n        hexlify(field.transform === 'hex' ? add0xToString(value.toString(16)) : value),\n      );\n      // Fixed-width field\n      if (field.fix === true && field.length && value.length !== field.length && value.length > 0) {\n        throw new Error(`invalid length for ${field.name}`);\n      }\n\n      // Variable-width (with a maximum)\n      if (field.fix === false && field.length) {\n        value = stripZeros(value);\n        if (value.length > field.length) {\n          throw new Error(`invalid length for ${field.name}`);\n        }\n      }\n\n      raw.push(hexlify(value));\n    });\n\n    if (this.txParams.chainId != null && this.txParams.chainId !== 0) {\n      raw.push(hexlify(this.txParams.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n\n    return [encode(raw), raw];\n  }\n\n  getRLPSigned(raw: any[], signature: Signature): string {\n    // temp setting to be compatible with eth\n    const rawLength = this.messenger.chainType === ChainType.Avalanche ? 11 : 9;\n    const sig = splitSignature(signature);\n    let v = 27 + (sig.recoveryParam || 0);\n    if (raw.length === rawLength) {\n      raw.pop();\n      raw.pop();\n      raw.pop();\n      v += this.chainId * 2 + 8;\n    }\n\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r) || []));\n    raw.push(stripZeros(arrayify(sig.s) || []));\n\n    return encode(raw);\n  }\n\n  /**\n   * @example\n   * ```javascript\n   * console.log(txn.getRawTransaction());\n   * ```\n   */\n  getRawTransaction(): string {\n    return this.rawTransaction;\n  }\n\n  /** @hidden */\n  recover(rawTransaction: string): Transaction {\n    // temp setting to be compatible with eth\n    const recovered =\n      this.messenger.chainType === ChainType.Avalanche\n        ? recover(rawTransaction)\n        : recoverETH(rawTransaction);\n\n    this.setParams(recovered);\n    return this;\n  }\n\n  /**\n   * get the payload of transaction\n   *\n   * @example\n   * ```\n   * const payload = txn.txPayload;\n   * console.log(payload);\n   * ```\n   */\n  get txPayload() {\n    return {\n      from: this.txParams.from || '0x',\n      to: this.txParams.to || '0x',\n      shardID: this.txParams.shardID ? numberToHex(this.shardID) : '0x',\n      toShardID: this.txParams.toShardID ? numberToHex(this.toShardID) : '0x',\n      gas: this.txParams.gasLimit ? numberToHex(this.txParams.gasLimit) : '0x',\n      gasPrice: this.txParams.gasPrice ? numberToHex(this.txParams.gasPrice) : '0x',\n      value: this.txParams.value ? numberToHex(this.txParams.value) : '0x',\n      data: this.txParams.data || '0x',\n      nonce: this.txParams.nonce ? numberToHex(this.nonce) : '0x',\n    };\n  }\n\n  /**\n   * get transaction params\n   *\n   * @example\n   * ```\n   * const txParams = txn.txParams;\n   * console.log(txParams)\n   * ```\n   */\n  get txParams(): TxParams {\n    return {\n      id: this.id || '0x',\n      from: this.from || '',\n      nonce: this.nonce || 0,\n      gasPrice: this.gasPrice || new Unit(0).asWei().toWei(),\n      gasLimit: this.gasLimit || new Unit(0).asWei().toWei(),\n      shardID: this.shardID !== undefined ? this.shardID : this.messenger.currentShard,\n      toShardID: this.toShardID !== undefined ? this.toShardID : this.messenger.currentShard,\n      to: Transaction.normalizeAddress(this.to) || '0x',\n      value: this.value || new Unit(0).asWei().toWei(),\n      data: this.data || '0x',\n      chainId: this.chainId || 0,\n      rawTransaction: this.rawTransaction || '0x',\n      unsignedRawTransaction: this.unsignedRawTransaction || '0x',\n      signature: this.signature || {r:'', s:'', recoveryParam:0, v:0},\n    };\n  }\n\n  /**\n   * set the params to the txn\n   *\n   * @example\n   * ```\n   * txn.setParams({\n   *   to: 'avax1ew56rqrucu6p6n598fmjmnfh8dd4xpg6atne9c',\n   *   value: '1200',\n   *   gasLimit: '230000',\n   *   shardID: 1,\n   *   toShardID: 0,\n   *   gasPrice: new hmy.utils.Unit('101').asGwei().toWei(),\n   *   signature: {\n   *     r: '0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c042',\n   *     s: '0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b354',\n   *     v: 0\n   *   },\n   * });\n   * console.log(txn);\n   * ```\n   */\n  setParams(params: TxParams) {\n    this.id = params && params.id ? params.id : '0x';\n    this.from = params && params.from ? params.from : '0x';\n    this.nonce = params && params.nonce ? params.nonce : 0;\n    this.gasPrice =\n      params && params.gasPrice\n        ? new Unit(params.gasPrice).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.gasLimit =\n      params && params.gasLimit\n        ? new Unit(params.gasLimit).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.shardID =\n      params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n    this.toShardID =\n      params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n    this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n    this.value =\n      params && params.value ? new Unit(params.value).asWei().toWei() : new Unit(0).asWei().toWei();\n    this.data = params && params.data ? params.data : '0x';\n    this.chainId = params && params.chainId ? params.chainId : 0;\n    this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n    this.unsignedRawTransaction =\n      params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n    this.signature =\n      params && params.signature\n        ? params.signature\n        : {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n          };\n    if (this.rawTransaction !== '0x') {\n      this.setTxStatus(TxStatus.SIGNED);\n    } else {\n      this.setTxStatus(TxStatus.INTIALIZED);\n    }\n  }\n\n  /** @hidden */\n  map(fn: any) {\n    const newParams = fn(this.txParams);\n    this.setParams(newParams);\n\n    return this;\n  }\n\n  /**\n   * Check whether the transaction is cross shard\n   *\n   * @example\n   * ```javascript\n   * console.log(txn.isCrossShard());\n   * ```\n   */\n  isCrossShard(): boolean {\n    return new BN(this.txParams.shardID).toString() !== new BN(this.txParams.toShardID).toString();\n  }\n\n  /**\n   *\n   * @example\n   * ```\n   * txn.sendTransaction().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n  async sendTransaction(): Promise<[Transaction, string]> {\n    if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n      throw new Error('Transaction not signed');\n    }\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n\n    // const fromShard = this.shardID;\n    // const toShard = this.toShardID;\n    // await this.messenger.setShardingProviders();\n    const res = await this.messenger.send(\n      RPCMethod.SendRawTransaction,\n      this.rawTransaction,\n      this.messenger.chainType,\n      typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID,\n    );\n\n    // temporarilly hard coded\n    if (res.isResult()) {\n      this.id = res.result;\n      this.emitTransactionHash(this.id);\n      this.setTxStatus(TxStatus.PENDING);\n      // await this.confirm(this.id, 20, 1000);\n      return [this, res.result];\n    } else if (res.isError()) {\n      this.emitConfirm(`transaction failed:${res.error.message}`);\n      this.setTxStatus(TxStatus.REJECTED);\n      return [this, `transaction failed:${res.error.message}`];\n    } else {\n      this.emitError('transaction failed');\n      throw new Error('transaction failed');\n    }\n  }\n\n  async confirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    shardID: number | string = this.txParams.shardID,\n    toShardID: number | string = this.txParams.toShardID,\n  ) {\n    const txConfirmed = await this.txConfirm(txHash, maxAttempts, interval, shardID);\n    if (!this.isCrossShard()) {\n      return txConfirmed;\n    }\n    if (txConfirmed.isConfirmed()) {\n      const cxConfirmed = await this.cxConfirm(txHash, maxAttempts, interval, toShardID);\n      return cxConfirmed;\n    } else {\n      return txConfirmed;\n    }\n  }\n}\nexport { Transaction };\n","/**\n * @packageDocumentation\n * @module avalanche-transaction\n * @hidden\n */\n\nimport { Messenger } from 'avalanche-js-network';\nimport { AddressSuffix } from 'avalanche-js-utils';\nimport { Transaction } from './transaction';\nimport { TxParams, TxStatus } from './types';\nimport { defaultMessenger } from './utils';\n\nexport class ShardingTransaction extends Transaction {\n  constructor(\n    params?: TxParams | any,\n    messenger: Messenger = defaultMessenger,\n    txStatus = TxStatus.INTIALIZED,\n  ) {\n    const fromAddress = params.from;\n    const toAddress = params.to;\n    const fromExtraction =\n      fromAddress !== undefined ? fromAddress.split(AddressSuffix) : ['0x', undefined];\n    const toExtraction =\n      toAddress !== undefined ? toAddress.split(AddressSuffix) : ['0x', undefined];\n    const from = fromExtraction[0];\n    const shardID =\n      fromExtraction[1] !== undefined\n        ? Number.parseInt(fromExtraction[1], 10)\n        : params.shardID !== undefined\n        ? params.shardID\n        : 0;\n    const to = toExtraction[0];\n    const toShardID =\n      toExtraction[1] !== undefined\n        ? Number.parseInt(toExtraction[1], 10)\n        : params.toShardID !== undefined\n        ? params.toShardID\n        : 0;\n\n    const reParams = {\n      ...params,\n      from,\n      to,\n      shardID,\n      toShardID,\n    };\n\n    super(reParams, messenger, txStatus);\n  }\n}\n","/**\n * ## hhahaha\n *\n * @packageDocumentation\n * @module avalanche-transaction\n */\n\nimport { getContractAddress, getAddress } from 'avalanche-js-crypto';\nimport { Messenger } from 'avalanche-js-network';\nimport { Transaction } from './transaction';\nimport { ShardingTransaction } from './shardingTransaction';\nimport { TxParams, TxStatus } from './types';\n\nexport class TransactionFactory {\n  static getContractAddress(tx: Transaction) {\n    const { from, nonce } = tx.txParams;\n    return getAddress(\n      getContractAddress(getAddress(from).checksum, Number.parseInt(`${nonce}`, 10)),\n    ).checksum;\n  }\n\n  messenger: Messenger;\n  constructor(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n\n  /**\n   * Create a new Transaction\n   * @params\n   * ```\n   * // to: Address of the receiver\n   * // value: value transferred in wei\n   * // gasLimit: the maximum gas would pay, can use string\n   * // shardID: send token from shardID\n   * // toShardId: send token to shardID\n   * // gasPrice: you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const txn = hmy.transactions.newTx({\n   *   to: 'avax166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *   value: '10000',\n   *   gasLimit: '210000',\n   *   shardID: 0,\n   *   toShardID: 0,\n   *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   * });\n   * ```\n   */\n  newTx(txParams?: TxParams | any, sharding: boolean = false): Transaction {\n    if (!sharding) {\n      return new Transaction(txParams, this.messenger, TxStatus.INTIALIZED);\n    }\n    return new ShardingTransaction(txParams, this.messenger, TxStatus.INTIALIZED);\n  }\n\n  /**\n   * clone the transaction\n   *\n   * @param transaction\n   *\n   * @example\n   * ```javascript\n   * const cloneTxn = hmy.transactions.clone(txn);\n   * console.log(cloneTxn)\n   * ```\n   */\n  clone(transaction: Transaction): Transaction {\n    return new Transaction(transaction.txParams, this.messenger, TxStatus.INTIALIZED);\n  }\n\n  /**\n   *\n   * @example\n   * ```javascript\n   * txHash = '0xf8698085174876e8008252088080949d72989b68777a1f3ffd6f1db079f1928373ee52830186a08027a0ab8229ff5d5240948098f26372eaed9ab2e9be23e8594b08e358ca56a47f8ae9a0084e5c4d1fec496af444423d8a714f65c079260ff01a1be1de7005dd424adf44'\n   *\n   * const recoverTx = hmy.transactions.recover(txHash);\n   * console.log(recoverTx);\n   * ```\n   */\n  recover(txHash: string): Transaction {\n    const newTxn = new Transaction({}, this.messenger, TxStatus.INTIALIZED);\n    newTxn.recover(txHash);\n    return newTxn;\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-transaction\n * @hidden\n */\n\nimport { Messenger } from 'avalanche-js-network';\nimport { TxStatus } from './types';\n\nexport abstract class AbstractTransaction {\n  abstract setMessenger(messenger: Messenger): void;\n  abstract setTxStatus(txStatus: TxStatus): void;\n  abstract getTxStatus(): TxStatus;\n  abstract isInitialized(): boolean;\n  abstract isSigned(): boolean;\n  abstract isPending(): boolean;\n  abstract isRejected(): boolean;\n  abstract isConfirmed(): boolean;\n  abstract async trackTx(txHash: string, shardID: number | string): Promise<boolean>;\n  abstract async txConfirm(\n    txHash: string,\n    maxAttempts: number | undefined,\n    interval: number | undefined,\n    shardID: string | number,\n  ): Promise<any>;\n  abstract async socketConfirm(\n    txHash: string,\n    maxAttempts: number,\n    shardID: number | string,\n  ): Promise<any>;\n  abstract async getBlockNumber(shardID: number | string): Promise<any>;\n  abstract async getBlockByNumber(blockNumber: string): Promise<any>;\n}\n"],"names":["TxStatus","transactionFields","name","length","fix","transform","transactionFieldsETH","handleNumber","value","isHex","hexToNumber","handleAddress","isAddress","recover","rawTransaction","transaction","decode","Error","tx","id","from","unsignedRawTransaction","nonce","BN","strip0x","toNumber","gasPrice","gasLimit","shardID","toShardID","to","getAddress","checksum","data","chainId","signature","r","s","recoveryParam","v","error","hexZeroPad","isZero","Math","floor","raw","slice","push","hexlify","digest","keccak256","encode","recoveredFrom","recoverAddress","recoverETH","sleep","ms","Promise","resolve","setTimeout","TransactionEvents","defaultMessenger","Messenger","HttpProvider","ChainType","Avalanche","RLPSign","prv","getRLPUnsigned","regroup","txParams","setParams","sign","signed","getRLPSigned","TransactionBase","messenger","txStatus","INTIALIZED","emitter","Emitter","currentShard","normalizeAddress","address","AvalancheAddress","isValidChecksum","isValidBech32","isValidBech32TestNet","setMessenger","setTxStatus","getTxStatus","setCxStatus","cxStatus","getCxStatus","isInitialized","isSigned","SIGNED","isPending","PENDING","isRejected","REJECTED","isConfirmed","CONFIRMED","isCxPending","isCxRejected","isCxConfirmed","observed","trackTx","txHash","send","RPCMethod","GetTransactionReceipt","chainType","Number","parseInt","res","isResult","result","receipt","emitReceipt","transactionHash","confirmations","status","byzantium","undefined","root","getBlockNumber","currentBlock","blockNumbers","toString","confirmationCheck","txConfirm","maxAttempts","interval","provider","oldBlock","checkBlock","attempt","newBlock","nextBlock","add","gte","emitTrack","emitConfirm","socketConfirm","reject","newHeads","NewHeaders","then","p","onData","blockNumber","chainPrefix","params","Header","number","includes","unsubscribe","onError","emitError","emitTransactionHash","emit","confirmation","track","emitCxReceipt","cxReceipt","emitCxConfirm","cxConfirmation","emitCxTrack","cxTrack","BlockNumber","isError","message","replace","getBlockByNumber","GetBlockByNumber","block","cxConfirm","trackCx","socketCxConfirm","GetCXReceiptByHash","cxBlockNumbers","cxConfirmationCheck","Transaction","Unit","asWei","toWei","isCrossShard","NONE","fields","forEach","field","arrayify","add0xToString","stripZeros","rawLength","sig","splitSignature","pop","getRawTransaction","recovered","map","fn","newParams","sendTransaction","SendRawTransaction","confirm","txConfirmed","cxConfirmed","numberToHex","gas","ShardingTransaction","fromAddress","toAddress","fromExtraction","split","AddressSuffix","toExtraction","reParams","TransactionFactory","getContractAddress","newTx","sharding","clone","newTxn","AbstractTransaction"],"mappings":"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"}